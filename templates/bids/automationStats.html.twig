{% extends 'base.html.twig' %}

{% block title %}Automations Performance Overview{% endblock %}

{% block navigation %}
{{ include('loans/_loanNavMenu.html.twig')}}
{% endblock %}

{% block body %}
<div class="row">

    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Placed / Approved Bids per Automation</h4>
                <canvas id="stackedBarChart"></canvas>
            </div>
        </div>
    </div>

    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Automations Performance</h4>
                <canvas id="radarChart"></canvas>
            </div>
        </div>
    </div>

    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Conversion Rate</h4>
                <canvas id="barLineChart"></canvas>
            </div>
        </div>
    </div>

</div>

<script src="/dashboard-template/vendors/js/vendor.bundle.base.js"></script>
<script src="/dashboard-template/vendors/chart.js/Chart.min.js"></script>
<script src="/dashboard-template/js/chart.js"></script>

<script>

$(function() {
  'use strict';

const labels = [{% for automation in automations %}'{{ automation.name }}', {% endfor %}];
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Placed Bids',
      data: [{% for automation in automations %}{{ getPlacedBids(automation) }}, {% endfor %}],
      backgroundColor: 'rgba(54, 162, 235, 0.2)',
      borderColor: 'rgba(54, 162, 235, 1)',
      borderWidth: 1,
      fill: false
    },
    {
      label: 'Approved Bids',
      data: [{% for automation in automations %}{{ getApprovedBids(automation) }}, {% endfor %}],
      backgroundColor: 'rgba(75, 192, 192, 0.2)',
      borderColor: 'rgba(75, 192, 192, 1)',
      borderWidth: 1,
      fill: false
    },
  ]
};


const config = {
  type: 'bar',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Bar Chart - Stacked'
      },
    },
    responsive: true,
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true
      }
    }
  }
};

  if ($("#stackedBarChart").length) {
    var stackedBarChartCanvas = $("#stackedBarChart").get(0).getContext("2d");
    var stackedBarChart = new Chart(stackedBarChartCanvas, config);
  }

/* ------------ Radar chart ---------- */

const radarChartData = {
  labels: ['placed', 'approved', 'rejected'],
  datasets: [
    {
      label: 'automation 1',
      data: [90, 50, 20],
      borderColor: 'rgba(54, 162, 235, 0.2)',
      backgroundColor: 'rgba(54, 162, 235, 0.2)',
    },
        {
      label: 'automation 2',
      data: [81, 18, 60],
      borderColor: 'rgba(75, 192, 192, 0.2)',
      backgroundColor: 'rgba(75, 192, 192, 0.2)',
    },
        {
      label: 'automation 3',
      data: [10, 2, 0],
      borderColor: 'rgba(255, 99, 132, 0.2)',
      backgroundColor: 'rgba(255, 99, 132, 0.2)',
    },
  ]
};

const radarChartConfig = {
  type: 'radar',
  data: radarChartData,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Radar Chart'
      }
    }
  },
};

  if ($("#radarChart").length) {
    var radarChartCanvas = $("#radarChart").get(0).getContext("2d");
    var radarChart = new Chart(radarChartCanvas, radarChartConfig);
  }

/* ------------ barLineChart ---------- */

const barLineChartData = {
  labels: [{% for automation in automations %}'{{ automation.name }}', {% endfor %}],
  datasets: [
    {
      label: 'Placed Bids',
      data: [{% for automation in automations %}{{ getPlacedBids(automation) }}, {% endfor %}],
      borderColor: 'rgba(255, 99, 132, 0.2)',
      backgroundColor: 'rgba(255, 99, 132, 0.2)',
      stack: 'combined',
      type: 'bar'
    },
    {
      label: 'Conversion Rate',
      data: [{% for automation in automations %}{{ getPlacedBids(automation) == 0 ? 0 : (getPlacedBids(automation) / getPlacedBids(automation)) * 100 }}, {% endfor %}],
      borderColor: 'rgba(54, 162, 235, 0.2)',
      backgroundColor: 'rgba(54, 162, 235, 0.2)',
      stack: 'combined'
    }
  ]
};

const barLineChartConfig = {
  type: 'line',
  data: barLineChartData,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Stacked Line/Bar Chart'
      }
    },
    scales: {
      y: {
        stacked: true
      }
    }
  },
};

  if ($("#barLineChart").length) {
    var barLineChartCanvas = $("#barLineChart").get(0).getContext("2d");
    var barLineChart = new Chart(barLineChartCanvas, barLineChartConfig);
  }

});

</script>

{% endblock %}
